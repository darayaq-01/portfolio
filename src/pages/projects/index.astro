---
import '@styles/global.css';
import BaseHead from '../../components/BaseHead.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import Container from '@components/Container.astro';
import CardTitle from '@components/ui/CardTitle.astro';
import ProjectCard from '@components/ProjectCard.astro';

const allProjects = await getCollection('projects');
const shuffledProjects = allProjects.sort(() => Math.random() - 0.5);
---

<!doctype html>
<html lang='en'>
    <head>
        <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    </head>
    <body>
        <Layout
            title='DarayaQ | Web Developer'
            description='Daniel Araya - Web Developer'
        >
            <Container>
                <div
                    class='text-d-yellow h-full w-full overflow-hidden rounded-md border-none bg-gradient-to-r from-[#fef6db] to-[#fce197] px-8 py-6 md:py-8'
                >
                    <CardTitle className='pb-6'>All my Projects</CardTitle>

                    <div id='masonry-grid' class='masonry-grid'>
                        {
                            shuffledProjects.map((project, index) => (
                                <ProjectCard
                                    project={project}
                                    className={`masonry-item ${index >= 3 ? 'hidden' : ''}`}
                                    imageClass='object-cover group-hover:scale-95 rounded-t-md w-full lazy-image'
                                    classTitleGrey='bottom-0 py-1 h-fit'
                                >
                                    <div class='absolute inset-0 group-hover:backdrop-sepia' />
                                </ProjectCard>
                            ))
                        }
                    </div>
                    {
                        shuffledProjects.length > 3 && (
                            <div class='text-center mt-8'>
                                <button
                                    id='load-more'
                                    class='bg-d-yellow text-white px-4 py-2 rounded-md hover:bg-d-yellow-dark transition-colors'
                                >
                                    Load More
                                </button>
                            </div>
                        )
                    }
                </div>
            </Container>
        </Layout>
    </body>
</html>

<style>
    .masonry-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        grid-auto-rows: 10px;
        grid-gap: 1rem;
    }

    .masonry-item {
        grid-row-end: span 30; /* Valor base, se ajustar√° con JavaScript */
    }

    @media (min-width: 640px) {
        .masonry-grid {
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        }
    }
</style>

<script>
    let visibleItems = 3;
    const masonryGrid = document.getElementById('masonry-grid');
    const loadMoreButton = document.getElementById('load-more');
    const allItems = Array.from(document.querySelectorAll('.masonry-item'));

    function resizeMasonryItem(item) {
        const grid = document.querySelector('.masonry-grid');
        const rowHeight = parseInt(
            window.getComputedStyle(grid).getPropertyValue('grid-auto-rows')
        );
        const rowGap = parseInt(
            window.getComputedStyle(grid).getPropertyValue('grid-row-gap')
        );

        const content = item.querySelector('.masonry-content');
        const rowSpan = Math.ceil(
            (content.getBoundingClientRect().height + rowGap) /
                (rowHeight + rowGap)
        );

        item.style.gridRowEnd = `span ${rowSpan}`;
    }

    function resizeAllMasonryItems() {
        const visibleItems = document.querySelectorAll(
            '.masonry-item:not(.hidden)'
        );
        visibleItems.forEach(resizeMasonryItem);
    }

    function handleIntersection(entries, observer) {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                const lazyImage = entry.target.querySelector('.lazy-image');
                if (lazyImage && lazyImage.dataset.src) {
                    lazyImage.src = lazyImage.dataset.src;
                    lazyImage.removeAttribute('data-src');
                    lazyImage.classList.remove('lazy-image');
                }
                resizeMasonryItem(entry.target);
                observer.unobserve(entry.target);
            }
        });
    }

    const observer = new IntersectionObserver(handleIntersection, {
        root: null,
        rootMargin: '0px',
        threshold: 0.1,
    });

    function loadMoreItems() {
        const windowWidth = window.innerWidth;
        let itemsToLoad = 3;
        if (windowWidth >= 1024) {
            itemsToLoad = 12 - visibleItems;
        } else if (windowWidth >= 768) {
            itemsToLoad = 9 - visibleItems;
        } else {
            itemsToLoad = 3;
        }

        const hiddenItems = allItems.slice(
            visibleItems,
            visibleItems + itemsToLoad
        );
        hiddenItems.forEach((item) => {
            item.classList.remove('hidden');
            observer.observe(item);
        });

        visibleItems += itemsToLoad;

        if (visibleItems >= allItems.length) {
            loadMoreButton.style.display = 'none';
        }

        resizeAllMasonryItems();
    }

    loadMoreButton.addEventListener('click', loadMoreItems);

    document.addEventListener('DOMContentLoaded', () => {
        const initialItems = document.querySelectorAll(
            '.masonry-item:not(.hidden)'
        );
        initialItems.forEach((item) => observer.observe(item));
        resizeAllMasonryItems();
    });

    window.addEventListener('resize', resizeAllMasonryItems);
</script>
