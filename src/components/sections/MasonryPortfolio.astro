---
import '@styles/global.css';
import { getCollection } from 'astro:content';
import Container from '@components/Container.astro';
import CardTitle from '@components/ui/CardTitle.astro';
import ProjectCard from '@components/ProjectCard.astro';

const allProjects = await getCollection('projects');
const shuffledProjects = allProjects.sort(() => Math.random() - 0.5);
---

<Container>
    <div
        class='text-d-yellow h-full w-full overflow-hidden rounded-md border-none bg-gradient-to-r from-[#fef6db] to-[#fce197] px-8 py-6 md:py-8'
    >
        <CardTitle className='pb-6'>Projects</CardTitle>

        <div id='projects' class='masonry-grid'>
            {
                shuffledProjects.map((project, index) => (
                    <ProjectCard
                        project={project}
                        className={`masonry-item ${index >= 3 ? 'hidden' : ''}`}
                        imageClass='object-cover group-hover:scale-95 rounded-t-md w-full aspect-auto lazy-image'
                        classTitleGrey='bottom-0 py-1 h-fit'
                    >
                        <div class='absolute inset-0 group-hover:backdrop-sepia' />
                    </ProjectCard>
                ))
            }
        </div>
        {
            shuffledProjects.length > 3 && (
                <div class='text-center mt-8'>
                    <button
                        id='toggle-items'
                        class='bg-d-yellow text-white px-4 py-2 rounded-md hover:bg-d-yellow-dark transition-colors'
                    >
                        Load More
                    </button>
                </div>
            )
        }
    </div>
</Container>

<style>
    .masonry-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        grid-auto-rows: 10px;
        grid-gap: 1rem;
    }

    .masonry-item {
        grid-row-end: span 30; /* Valor base, se ajustar√° con JavaScript */
    }

    @media (min-width: 640px) {
        .masonry-grid {
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        }
    }
</style>

<script>
    import {
        resizeAllMasonryItems,
        handleIntersection,
        loadMoreItems,
        showLessItems,
    } from '@utils/functions';

    let visibleItems = 3;
    const toggleButton = document.getElementById('toggle-items');
    const allItems = Array.from(document.querySelectorAll('.masonry-item'));

    const observer = new IntersectionObserver(handleIntersection, {
        root: null,
        rootMargin: '0px',
        threshold: 0.1,
    });

    function handleToggle() {
        if (visibleItems < allItems.length) {
            visibleItems = loadMoreItems(allItems, visibleItems, observer);
            if (visibleItems >= allItems.length) {
                toggleButton.textContent = 'Show Less';
            }
        } else {
            visibleItems = showLessItems(allItems);
            toggleButton.textContent = 'Load More';
        }
        resizeAllMasonryItems();
    }

    if (toggleButton) {
        toggleButton.addEventListener('click', handleToggle);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const initialItems = document.querySelectorAll(
            '.masonry-item:not(.hidden)'
        );
        initialItems.forEach((item) => observer.observe(item));
        resizeAllMasonryItems();
    });

    window.addEventListener('resize', resizeAllMasonryItems);
</script>
